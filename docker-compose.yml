# Docker Compose for Orders Processing System - Local Development
version: '3.8'

services:
  # Orders Processing Application
  orders-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: orders-app
    ports:
      - "8080:8080"
    environment:
      # Spring Configuration
      - SPRING_PROFILES_ACTIVE=docker
      
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=orders_db
      - DB_USERNAME=orders_user
      - DB_PASSWORD=orders_pass
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_pass
      
      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      
      # External API (Mock)
      - CD_API_URL=http://distribution-centers-api:3000
      
      # JVM Options
      - JAVA_OPTS=-server -Xms256m -Xmx512m -XX:+UseG1GC
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - orders-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.4
    container_name: orders-postgres
    environment:
      - POSTGRES_DB=orders_db
      - POSTGRES_USER=orders_user
      - POSTGRES_PASSWORD=orders_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - orders-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders_user -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: orders-redis
    command: redis-server --requirepass redis_pass --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - orders-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: orders-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - orders-network
    restart: unless-stopped

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: orders-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - orders-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka UI (for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: orders-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: orders-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - orders-network
    restart: unless-stopped

  # Mock Distribution Centers API
  distribution-centers-api:
    image: wiremock/wiremock:3.2.0
    container_name: distribution-centers-api
    ports:
      - "3000:8080"
    volumes:
      - ./docker/wiremock/mappings:/home/wiremock/mappings
      - ./docker/wiremock/__files:/home/wiremock/__files
    networks:
      - orders-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/__admin/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis Insight (for development)
  redis-insight:
    image: redis/redisinsight:latest
    container_name: orders-redis-insight
    ports:
      - "5540:5540"
    volumes:
      - redis_insight_data:/data
    networks:
      - orders-network
    restart: unless-stopped

  # pgAdmin (for development)
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: orders-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@orders.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - orders-network
    restart: unless-stopped
    depends_on:
      - postgres

networks:
  orders-network:
    driver: bridge
    name: orders-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  redis_insight_data:
    driver: local
  pgadmin_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local