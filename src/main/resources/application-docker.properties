# Application configuration for Docker environment
# This file contains Docker-specific settings that override the default configuration

# Application Info
spring.application.name=orders-processing-system
server.port=8080

# Bean Definition Overriding (solve Redis template conflict)
spring.main.allow-bean-definition-overriding=true

# Database Configuration (PostgreSQL with PostGIS)
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:orders_db}
spring.datasource.username=${DB_USERNAME:orders_user}
spring.datasource.password=${DB_PASSWORD:orders_pass}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Configuration for containers
spring.datasource.hikari.pool-name=OrdersHikariPool-Docker
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=60000

# JPA Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true

# Redis Configuration
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=2000ms
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0
spring.data.redis.lettuce.pool.max-wait=-1ms

# Cache Configuration
app.cache.distribution-centers.ttl=PT30M
app.cache.orders.ttl=PT10M

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.batch-size=16384
spring.kafka.producer.linger-ms=5
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.enable-idempotence=true

# HTTP Client Configuration
app.http-client.connection-timeout=5000
app.http-client.read-timeout=10000
app.http-client.max-retry-attempts=3
app.http-client.initial-retry-interval=1000
app.http-client.retry-multiplier=2.0
app.http-client.max-retry-interval=10000

# External API Configuration
app.distribution-center.base-url=${CD_API_URL:http://localhost:3000}
app.external-api.distribution-centers.url=${CD_API_URL:http://localhost:3000}
app.external-api.distribution-centers.timeout=5000
app.external-api.distribution-centers.retry-attempts=3

# Logging Configuration
logging.level.root=INFO
logging.level.br.com.ml.mktplace.orders=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Logging pattern for containers (JSON format)
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] %logger{36} - %msg%n

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Custom health indicators
management.health.db.enabled=true
management.health.redis.enabled=true
management.health.kafka.enabled=true

# Metrics Configuration
management.metrics.export.prometheus.enabled=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles.http.server.requests=0.5,0.95,0.99

# Application Properties
app.version=1.0.0
app.environment=docker

# JVM and Container optimizations
spring.jmx.enabled=false
spring.main.lazy-initialization=false
server.tomcat.threads.max=50
server.tomcat.threads.min-spare=10
server.tomcat.max-connections=1000
server.tomcat.accept-count=100
server.tomcat.connection-timeout=20000

# Validation
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.default-property-inclusion=NON_NULL